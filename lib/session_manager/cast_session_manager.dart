import 'package:google_cast/entities/cast_device.dart';

/// <p>A class that manages sessions. </p>
/// <p>The method <a class="el notranslate" href="/cast/docs/reference/ios/interface_g_c_k_session_manager#a211d476c2e9b265ed7510d12f4b29c02">startSessionWithDevice: (GCKSessionManager)</a> is used to create a new session with a given <a class="el notranslate" href="/cast/docs/reference/ios/interface_g_c_k_device" data-title="An object representing a receiver device. ">GCKDevice</a>. The session manager uses the <a class="el notranslate" href="/cast/docs/reference/ios/interface_g_c_k_device_provider" data-title="An abstract base class for performing device discovery and session construction. ">GCKDeviceProvider</a> for that device type to construct a new <a class="el notranslate" href="/cast/docs/reference/ios/interface_g_c_k_session" data-title="An abstract base class representing a session with a receiver device. ">GCKSession</a> object, to which it then delegates all session requests.</p>
/// <p><a class="el notranslate" href="/cast/docs/reference/ios/interface_g_c_k_session_manager" data-title="A class that manages sessions. ">GCKSessionManager</a> handles the automatic resumption of suspended sessions (that is, resuming sessions that were ended when the application went to the background, or in the event that the application crashed or was forcibly terminated by the user). When the application resumes or restarts, the session manager will wait for a short time for the device provider of the suspended session's device to discover that device again, and if it does, it will attempt to reconnect to that device and re-establish the session automatically.</p>
/// <p>If the application has created a <a class="el notranslate" href="/cast/docs/reference/ios/interface_g_c_k_u_i_cast_button" data-title="A subclass of UIButton that implements a &quot;Cast&quot; button. ">GCKUICastButton</a> without providing a target and selector, then a user tap on the button will display the default Cast dialog and it will automatically start and stop sessions based on user selection or disconnection of a device. If however the application is providing its own device selection/control dialog UI, then it should use the <a class="el notranslate" href="/cast/docs/reference/ios/interface_g_c_k_session_manager" data-title="A class that manages sessions. ">GCKSessionManager</a> directly to create and control sessions.</p>
/// <p>Whether or not the application uses the <a class="el notranslate" href="/cast/docs/reference/ios/interface_g_c_k_session_manager" data-title="A class that manages sessions. ">GCKSessionManager</a> to control sessions, it can attach a <a class="el notranslate" href="/cast/docs/reference/ios/protocol_g_c_k_session_manager_listener-p" data-title="The GCKSessionManager listener protocol. ">GCKSessionManagerListener</a> to be notified of session events, and can also use KVO to monitor the <a class="el notranslate" href="/cast/docs/reference/ios/interface_g_c_k_session_manager#a8b48906a8910f328343e2260e6bef6a0" data-title="The current session connection state. ">connectionState</a> property to track the current session lifecycle state.</p>
/// <dl class="section since"><dt>Since</dt><dd>3.0 </dd></dl>

abstract class AGoogleCastSessionManager {
  Future<bool> startSessionWithDevice(GoogleCastDevice device);
}
